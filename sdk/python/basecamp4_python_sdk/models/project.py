# coding: utf-8

"""
    Basecamp4 API

    This is an API schema for the Basecamp4 API. It is used to generate client libraries to interact with the API.

    The version of the OpenAPI document: 1.0.0
    Contact: barry@wstrategies.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from basecamp4_python_sdk.models.dock_item import DockItem
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Project(BaseModel):
    """
    Project
    """ # noqa: E501
    id: StrictInt = Field(description="Unique identifier for the project")
    status: StrictStr = Field(description="Current status of the project")
    created_at: datetime = Field(description="Timestamp of project creation")
    updated_at: datetime = Field(description="Timestamp of last project update")
    name: StrictStr = Field(description="Name of the project")
    description: StrictStr = Field(description="Detailed description of the project")
    purpose: StrictStr = Field(description="Purpose of the project")
    clients_enabled: StrictBool = Field(description="Indicates if clients are enabled for the project")
    bookmark_url: StrictStr = Field(description="URL for bookmarking the project")
    url: StrictStr = Field(description="API URL for the project")
    app_url: StrictStr = Field(description="Web application URL for the project")
    dock: List[DockItem] = Field(description="Collection of dock items associated with the project")
    bookmarked: StrictBool = Field(description="Indicates if the project is bookmarked")
    __properties: ClassVar[List[str]] = ["id", "status", "created_at", "updated_at", "name", "description", "purpose", "clients_enabled", "bookmark_url", "url", "app_url", "dock", "bookmarked"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Project from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dock (list)
        _items = []
        if self.dock:
            for _item in self.dock:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dock'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Project from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "purpose": obj.get("purpose"),
            "clients_enabled": obj.get("clients_enabled"),
            "bookmark_url": obj.get("bookmark_url"),
            "url": obj.get("url"),
            "app_url": obj.get("app_url"),
            "dock": [DockItem.from_dict(_item) for _item in obj.get("dock")] if obj.get("dock") is not None else None,
            "bookmarked": obj.get("bookmarked")
        })
        return _obj


