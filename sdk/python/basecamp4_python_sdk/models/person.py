# coding: utf-8

"""
    Basecamp4 API

    This is an API schema for the Basecamp4 API. It is used to generate client libraries to interact with the API.

    The version of the OpenAPI document: 1.0.0
    Contact: barry@wstrategies.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from basecamp4_python_sdk.models.company import Company
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Person(BaseModel):
    """
    Person
    """ # noqa: E501
    id: StrictInt
    attachable_sgid: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    email_address: Optional[StrictStr] = None
    personable_type: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    bio: Optional[StrictStr] = None
    location: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    admin: Optional[StrictBool] = None
    owner: Optional[StrictBool] = None
    client: Optional[StrictBool] = None
    employee: Optional[StrictBool] = None
    time_zone: Optional[StrictStr] = None
    avatar_url: Optional[StrictStr] = None
    company: Optional[Company] = None
    can_manage_projects: Optional[StrictBool] = None
    can_manage_people: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["id", "attachable_sgid", "name", "email_address", "personable_type", "title", "bio", "location", "created_at", "updated_at", "admin", "owner", "client", "employee", "time_zone", "avatar_url", "company", "can_manage_projects", "can_manage_people"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Person from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Person from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "attachable_sgid": obj.get("attachable_sgid"),
            "name": obj.get("name"),
            "email_address": obj.get("email_address"),
            "personable_type": obj.get("personable_type"),
            "title": obj.get("title"),
            "bio": obj.get("bio"),
            "location": obj.get("location"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "admin": obj.get("admin"),
            "owner": obj.get("owner"),
            "client": obj.get("client"),
            "employee": obj.get("employee"),
            "time_zone": obj.get("time_zone"),
            "avatar_url": obj.get("avatar_url"),
            "company": Company.from_dict(obj.get("company")) if obj.get("company") is not None else None,
            "can_manage_projects": obj.get("can_manage_projects"),
            "can_manage_people": obj.get("can_manage_people")
        })
        return _obj


